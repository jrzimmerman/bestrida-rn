exports[`test renders ChallengeFeed component 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#2B2B2B",
      "flex": 1,
    }
  }>
  <View
    style={
      Object {
        "alignSelf": "stretch",
        "flex": 0.225,
      }
    }>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hitSlop={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignSelf": "stretch",
          "backgroundColor": "transparent",
          "borderColor": "#ef473a",
          "borderRadius": 4,
          "borderWidth": 1,
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "space-around",
          "margin": 10,
          "marginTop": 80,
          "opacity": 1,
          "paddingHorizontal": 8,
          "paddingVertical": 6,
        }
      }
      testID={undefined}>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "alignSelf": "center",
            "color": "#ef473a",
            "flexDirection": "row",
            "fontSize": 14,
          }
        }>
        Create Challenge
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "alignSelf": "stretch",
        "flex": 0.775,
      }
    }>
    <ScrollView
      automaticallyAdjustContentInsets={false}
      contentInset={
        Object {
          "bottom": 55,
        }
      }
      dataSource={
        ListViewDataSource {
          "items": 0,
        }
      }
      enableEmptySections={true}
      initialListSize={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={1000}
      onKeyboardDidHide={undefined}
      onKeyboardDidShow={undefined}
      onKeyboardWillHide={undefined}
      onKeyboardWillShow={undefined}
      onLayout={[Function]}
      onScroll={[Function]}
      pageSize={1}
      refreshControl={
        <function (props, context, updater) {
              // This constructor gets overridden by mocks. The argument is used
              // by mocks to assert on what gets mounted.
        
              if (process.env.NODE_ENV !== 'production') {
                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
              }
        
              // Wire up auto-binding
              if (this.__reactAutoBindPairs.length) {
                bindAutoBindMethods(this);
              }
        
              this.props = props;
              this.context = context;
              this.refs = emptyObject;
              this.updater = updater || ReactNoopUpdateQueue;
        
              this.state = null;
        
              // ReactClasses doesn't have constructors. Instead, they use the
              // getInitialState and componentWillMount methods for initialization.
        
              var initialState = this.getInitialState ? this.getInitialState() : null;
              if (process.env.NODE_ENV !== 'production') {
                // We allow auto-mocks to proceed as if they're returning null.
                if (initialState === undefined && this.getInitialState._isMockFunction) {
                  // This is probably bad practice. Consider warning here and
                  // deprecating this convenience.
                  initialState = null;
                }
              }
              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
        
              this.state = initialState;
            }
          onRefresh={[Function]}
          refreshing={false} />
      }
      removeClippedSubviews={true}
      renderRow={[Function]}
      scrollEventThrottle={50}
      scrollRenderAheadDistance={1000}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "alignSelf": "stretch",
        }
      } />
  </View>
</View>
`;
